{
  "_args": [
    [
      {
        "raw": "pg-ipc@^1.0.4",
        "scope": null,
        "escapedName": "pg-ipc",
        "name": "pg-ipc",
        "rawSpec": "^1.0.4",
        "spec": ">=1.0.4 <2.0.0",
        "type": "range"
      },
      "/Users/hugopapier/Documents/subscription-test/server/node_modules/graphql-postgres-subscriptions"
    ]
  ],
  "_from": "pg-ipc@>=1.0.4 <2.0.0",
  "_id": "pg-ipc@1.0.4",
  "_inCache": true,
  "_location": "/pg-ipc",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/pg-ipc-1.0.4.tgz_1485940598023_0.2815293329767883"
  },
  "_npmUser": {
    "name": "emilbayes",
    "email": "github@tixz.dk"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pg-ipc@^1.0.4",
    "scope": null,
    "escapedName": "pg-ipc",
    "name": "pg-ipc",
    "rawSpec": "^1.0.4",
    "spec": ">=1.0.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphql-postgres-subscriptions"
  ],
  "_resolved": "https://registry.npmjs.org/pg-ipc/-/pg-ipc-1.0.4.tgz",
  "_shasum": "e018f5aae417ded8a917878e33c1fe911bcce45f",
  "_shrinkwrap": null,
  "_spec": "pg-ipc@^1.0.4",
  "_where": "/Users/hugopapier/Documents/subscription-test/server/node_modules/graphql-postgres-subscriptions",
  "author": {
    "name": "Emil Bay",
    "email": "github@tixz.dk"
  },
  "bugs": {
    "url": "https://github.com/emilbayes/pg-ipc/issues"
  },
  "dependencies": {},
  "description": "IPC over PostgreSQL LISTEN/NOTIFY/UNLISTEN exposed as an EventEmitter",
  "devDependencies": {
    "after-all": "^2.0.2",
    "pg": "^6.1.2",
    "speedometer": "^1.0.0",
    "statistics": "^3.3.0",
    "tape": "^4.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e018f5aae417ded8a917878e33c1fe911bcce45f",
    "tarball": "https://registry.npmjs.org/pg-ipc/-/pg-ipc-1.0.4.tgz"
  },
  "gitHead": "6884a2925d3f38ad443f5829ba9d625b79fd4323",
  "homepage": "https://github.com/emilbayes/pg-ipc#readme",
  "keywords": [
    "ipc",
    "pg",
    "postgres",
    "eventemitter",
    "notify",
    "async"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "emilbayes",
      "email": "github@tixz.dk"
    }
  ],
  "name": "pg-ipc",
  "optionalDependencies": {},
  "readme": "# `pg-ipc`\n\n> IPC over PostgreSQL LISTEN/NOTIFY/UNLISTEN exposed as an EventEmitter\n\n## Usage\n\n```js\nvar pgIPC = require('pg-ipc')\nvar client = new require('pg').Client({ ... })\n\nvar ipc = pgIPC(client)\n\nipc.on('error', console.error)\n\nipc.on('end', function () {\n  client.end()\n})\n\nipc.on('someChannel', function (msg) {\n  // Ignore messages from this process\n  if (msg.processId === client.processID) return\n  console.log(msg.payload.currentTime)\n})\n\nipc.notify('someChannel', {currentTime: Date.now()})\n\n// some time later ...\n\nipc.end()\n\n```\n\n## API\n\n### `pgIPC(client)`\n\nInstantiates a new `EventEmitter` with the appropriate hooks to automatically\n`LISTEN`/`NOTIFY`/`UNLISTEN`. Note that `client` must be a `pg.Client` instance\nand not a `pg.Pool`, as a single connection is required.\n\n### `ipc.on(channel, listener)`\nAll the standard `EventEmitter` methods are exposed. When a listener is added to\n`channel`, a `LISTEN` command is automatically issued, and `UNLISTEN` when the\nnumber of listeners reach zero. The listener will receive the message as its\nfirst argument. Notable properties being `channel`, `payload`, `processId`. Each\npostgres `connection` is assigned a unique `processId`, which can be used to\nignore messages from the same process.\nSee [`EventEmitter`](https://nodejs.org/api/events.html) for more details.\nReserved channels are:\n`['newListener', 'removeListener', 'notify', 'unlisten', 'listen', 'error', 'end']`\n\n### `ipc.notify(channel[, payload])`\nAlias: `ipc.send(channel[, payload])`. Send a message to `channel` with optional\n`payload`. `payload` is transparently converted to JSON where appropriate.\n\n### `ipc.end()`\nIssue `UNLISTEN *` if connected, emit `end` and detach all event listeners.\nDoes not call `client.end()` so you can continue using the client. However,\nany listeners you've issued outside outside of this module will also be detached\n\n### Event: `listen`\n\nEmitted when a `LISTEN` has been successfully issued. Passed `channel`\n\n### Event: `notify`\n\nEmitted after a notification has been successfully sent. Passed `channel` and `payload`\n\n### Event: `unlisten`\n\nEmitted when a `UNLISTEN` has been successfully issued. Passed `channel`\n\n### Event: `end`\n\nEmitted when all `LISTEN`s have been removed, but before all event listeners are removed.\n\n### Event: `error`\n\nPropagates any errors caused by queries on `Client`. Passed the `err` argument from\nthe query callback.\n\n## Install\n\n```sh\nnpm install pg-ipc\n```\n\n## License\n\n[ISC](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/emilbayes/pg-ipc.git"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "version": "1.0.4"
}
